/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StakingImport } from './routes/staking'
import { Route as IndexImport } from './routes/index'
import { Route as DynamicIndexImport } from './routes/dynamic/index'
import { Route as ConservativeIndexImport } from './routes/conservative/index'

// Create/Update Routes

const StakingRoute = StakingImport.update({
  id: '/staking',
  path: '/staking',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DynamicIndexRoute = DynamicIndexImport.update({
  id: '/dynamic/',
  path: '/dynamic/',
  getParentRoute: () => rootRoute,
} as any)

const ConservativeIndexRoute = ConservativeIndexImport.update({
  id: '/conservative/',
  path: '/conservative/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/staking': {
      id: '/staking'
      path: '/staking'
      fullPath: '/staking'
      preLoaderRoute: typeof StakingImport
      parentRoute: typeof rootRoute
    }
    '/conservative/': {
      id: '/conservative/'
      path: '/conservative'
      fullPath: '/conservative'
      preLoaderRoute: typeof ConservativeIndexImport
      parentRoute: typeof rootRoute
    }
    '/dynamic/': {
      id: '/dynamic/'
      path: '/dynamic'
      fullPath: '/dynamic'
      preLoaderRoute: typeof DynamicIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/staking': typeof StakingRoute
  '/conservative': typeof ConservativeIndexRoute
  '/dynamic': typeof DynamicIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/staking': typeof StakingRoute
  '/conservative': typeof ConservativeIndexRoute
  '/dynamic': typeof DynamicIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/staking': typeof StakingRoute
  '/conservative/': typeof ConservativeIndexRoute
  '/dynamic/': typeof DynamicIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/staking' | '/conservative' | '/dynamic'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/staking' | '/conservative' | '/dynamic'
  id: '__root__' | '/' | '/staking' | '/conservative/' | '/dynamic/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  StakingRoute: typeof StakingRoute
  ConservativeIndexRoute: typeof ConservativeIndexRoute
  DynamicIndexRoute: typeof DynamicIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  StakingRoute: StakingRoute,
  ConservativeIndexRoute: ConservativeIndexRoute,
  DynamicIndexRoute: DynamicIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/staking",
        "/conservative/",
        "/dynamic/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/staking": {
      "filePath": "staking.tsx"
    },
    "/conservative/": {
      "filePath": "conservative/index.tsx"
    },
    "/dynamic/": {
      "filePath": "dynamic/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
